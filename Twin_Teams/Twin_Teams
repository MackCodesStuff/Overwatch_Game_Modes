settings
{
	main
	{
		Description: "Kill your double, I guess"
		Mode Name: "Twin Teams"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Pause Game On Player Disconnect: Yes
	}

	modes
	{
		disabled Assault
		{
			Tank Role Passive Health Bonus: Disabled
		}

		disabled Bounty Hunter
		{
			Tank Role Passive Health Bonus: Disabled
		}

		disabled Capture the Flag
		{
			Tank Role Passive Health Bonus: Disabled
		}

		Control
		{
			Tank Role Passive Health Bonus: Disabled
		}

		disabled Deathmatch
		{
			Tank Role Passive Health Bonus: Disabled
		}

		Escort
		{
			Tank Role Passive Health Bonus: Disabled
		}

		Hybrid
		{
			Tank Role Passive Health Bonus: Disabled
		}

		disabled Practice Range
		{
			Tank Role Passive Health Bonus: Disabled
		}

		Push
		{
			Tank Role Passive Health Bonus: Disabled
		}

		disabled Roadhogâ€™s Catch-A-Mari 
		{
			Tank Role Passive Health Bonus: Disabled
		}

		disabled Skirmish
		{
			Tank Role Passive Health Bonus: Disabled
		}

		disabled Team Deathmatch
		{
			Tank Role Passive Health Bonus: Disabled
		}

		General
		{
			Hero Limit: 2 Per Game
			Spawn Health Packs: Enabled
		}
	}
}

variables
{
	global:
		0: t1_s0_choice
		1: t2_s0_choice
		2: slot_0_hero
		3: t1_s1_choice
		4: t2_s1_choice
		5: slot_1_hero
		6: t1_s2_choice
		7: t2_s2_choice
		8: slot_2_hero
		9: t1_s3_choice
		10: t2_s3_choice
		11: slot_3_hero
		12: t1_s4_choice
		13: t2_s4_choice
		14: slot_4_hero

	player:
		0: health_percent
		1: ult_percent
}

rule("Start")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		"set respawn max to 10 seconds to avoid variable respawn time ruining death select"
		Set Respawn Max Time(All Players(All Teams), 10);
	}
}

rule("Start Select - 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.slot_0_hero != Null;
	}

	actions
	{
		"must wait until the player actively spawns"
		Wait Until(Has Spawned(Players In Slot(0, Team 1)), 60);
		"sets choice for team 1"
		Global.t1_s0_choice = Hero Of(Players In Slot(0, Team 1));
		"must wait until the player actively spawns"
		Wait Until(Has Spawned(Players In Slot(0, Team 2)), 60);
		"sets choice for team 2"
		Global.t2_s0_choice = Hero Of(Players In Slot(0, Team 2));
		"randomly selects one of the two choices"
		Global.slot_0_hero = Random Value In Array(Array(Global.t1_s0_choice, Global.t2_s0_choice));
		"force both players to be the same selected hero"
		Start Forcing Player To Be Hero(Players In Slot(0, All Teams), Global.slot_0_hero);
	}
}

rule("Death Select - 0")
{
	event
	{
		Player Died;
		All;
		Slot 0;
	}

	conditions
	{
		Is Game In Progress == True;
		"no switch if you cause your own death"
		Attacker != Victim;
	}

	actions
	{
		"allow dead player to switch characters"
		Stop Forcing Player To Be Hero(Event Player);
		"must wait to allow player to spawn in as new choice"
		Wait(11, Ignore Condition);
		"set new hero value"
		Global.slot_0_hero = Hero Of(Event Player);
		"start forcing event player to their character of choice, no reswap."
		Start Forcing Player To Be Hero(Event Player, Global.slot_0_hero);
		"check if the event player is a new character, changes only happen if they are."
		If(Global.slot_0_hero != Hero Of(Players In Slot(0, Opposite Team Of(Team Of(Event Player)))));
			"grab health percent before the swap"
			Players In Slot(0, Opposite Team Of(Team Of(Event Player))).health_percent = Health(Players In Slot(0, Opposite Team Of(Team Of(
				Event Player)))) / Max Health(Players In Slot(0, Opposite Team Of(Team Of(Event Player))));
			"grab ult charge before the swap"
			Players In Slot(0, Opposite Team Of(Team Of(Event Player))).ult_percent = Ultimate Charge Percent(Players In Slot(0,
				Opposite Team Of(Team Of(Event Player))));
			"start forcing the player on the other team's slot to the event player's new hero"
			Start Forcing Player To Be Hero(Players In Slot(0, Opposite Team Of(Team Of(Event Player))), Global.slot_0_hero);
			"pause REQUIRED. ult charge will not update properly without it"
			Wait(1, Ignore Condition);
			"multiply new hero health by the percent of the previous health, add one to prevent accidentally dying from character swap"
			Set Player Health(Players In Slot(0, Opposite Team Of(Team Of(Event Player))), Players In Slot(0, Opposite Team Of(Team Of(
				Event Player))).health_percent * Max Health(Players In Slot(0, Opposite Team Of(Team Of(Event Player)))) + 1);
			"set ultimate charge, living player retains 80% of their previous charge"
			Set Ultimate Charge(Players In Slot(0, Opposite Team Of(Team Of(Event Player))), Players In Slot(0, Opposite Team Of(Team Of(
				Event Player))).ult_percent * 0.800);
			"extra wait, just in case (sometimes needed for update)"
			Wait(1, Ignore Condition);
		End;
	}
}

rule("Start Select - 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.slot_1_hero != Null;
	}

	actions
	{
		"must wait until the player actively spawns"
		Wait Until(Has Spawned(Players In Slot(1, Team 1)), 60);
		"sets choice for team 1"
		Global.t1_s1_choice = Hero Of(Players In Slot(1, Team 1));
		"must wait until the player actively spawns"
		Wait Until(Has Spawned(Players In Slot(1, Team 2)), 60);
		"sets choice for team 2"
		Global.t2_s1_choice = Hero Of(Players In Slot(1, Team 2));
		"randomly selects one of the two choices"
		Global.slot_1_hero = Random Value In Array(Array(Global.t1_s1_choice, Global.t2_s1_choice));
		"force both players to be the same selected hero"
		Start Forcing Player To Be Hero(Players In Slot(1, All Teams), Global.slot_1_hero);
	}
}

rule("Death Select - 1")
{
	event
	{
		Player Died;
		All;
		Slot 1;
	}

	conditions
	{
		Is Game In Progress == True;
		"no switch if you cause your own death"
		Attacker != Victim;
	}

	actions
	{
		"allow dead player to switch characters"
		Stop Forcing Player To Be Hero(Event Player);
		"must wait to allow player to spawn in as new choice"
		Wait(11, Ignore Condition);
		"set new hero value"
		Global.slot_1_hero = Hero Of(Event Player);
		"start forcing event player to their character of choice, no reswap."
		Start Forcing Player To Be Hero(Event Player, Global.slot_1_hero);
		"check if the event player is a new character, changes only happen if they are."
		If(Global.slot_1_hero != Hero Of(Players In Slot(1, Opposite Team Of(Team Of(Event Player)))));
			"grab health percent before the swap"
			Players In Slot(1, Opposite Team Of(Team Of(Event Player))).health_percent = Health(Players In Slot(1, Opposite Team Of(Team Of(
				Event Player)))) / Max Health(Players In Slot(1, Opposite Team Of(Team Of(Event Player))));
			"grab ult charge before the swap"
			Players In Slot(1, Opposite Team Of(Team Of(Event Player))).ult_percent = Ultimate Charge Percent(Players In Slot(1,
				Opposite Team Of(Team Of(Event Player))));
			"start forcing the player on the other team's slot to the event player's new hero"
			Start Forcing Player To Be Hero(Players In Slot(1, Opposite Team Of(Team Of(Event Player))), Global.slot_1_hero);
			"pause REQUIRED. ult charge will not update properly without it"
			Wait(1, Ignore Condition);
			"multiply new hero health by the percent of the previous health, add one to prevent accidentally dying from character swap"
			Set Player Health(Players In Slot(1, Opposite Team Of(Team Of(Event Player))), Players In Slot(1, Opposite Team Of(Team Of(
				Event Player))).health_percent * Max Health(Players In Slot(1, Opposite Team Of(Team Of(Event Player)))) + 1);
			"set ultimate charge, living player retains 80% of their previous charge"
			Set Ultimate Charge(Players In Slot(1, Opposite Team Of(Team Of(Event Player))), Players In Slot(1, Opposite Team Of(Team Of(
				Event Player))).health_percent * 0.800);
			"extra wait, just in case (sometimes needed for update)"
			Wait(1, Ignore Condition);
		End;
	}
}

rule("Start Select - 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.slot_2_hero != Null;
	}

	actions
	{
		"must wait until the player actively spawns"
		Wait Until(Has Spawned(Players In Slot(2, Team 1)), 60);
		"sets choice for team 1"
		Global.t1_s2_choice = Hero Of(Players In Slot(2, Team 1));
		"must wait until the player actively spawns"
		Wait Until(Has Spawned(Players In Slot(2, Team 2)), 60);
		"sets choice for team 2"
		Global.t2_s2_choice = Hero Of(Players In Slot(2, Team 2));
		"randomly selects one of the two choices"
		Global.slot_2_hero = Random Value In Array(Array(Global.t1_s2_choice, Global.t2_s2_choice));
		"force both players to be the same selected hero"
		Start Forcing Player To Be Hero(Players In Slot(2, All Teams), Global.slot_2_hero);
	}
}

rule("Death Select - 2")
{
	event
	{
		Player Died;
		All;
		Slot 2;
	}

	conditions
	{
		Is Game In Progress == True;
		"no switch if you cause your own death"
		Attacker != Victim;
	}

	actions
	{
		"allow dead player to switch characters"
		Stop Forcing Player To Be Hero(Event Player);
		"must wait to allow player to spawn in as new choice"
		Wait(11, Ignore Condition);
		"set new hero value"
		Global.slot_2_hero = Hero Of(Event Player);
		"start forcing event player to their character of choice, no reswap."
		Start Forcing Player To Be Hero(Event Player, Global.slot_2_hero);
		"check if the event player is a new character, changes only happen if they are."
		If(Global.slot_2_hero != Hero Of(Players In Slot(2, Opposite Team Of(Team Of(Event Player)))));
			"grab health percent before the swap"
			Players In Slot(2, Opposite Team Of(Team Of(Event Player))).health_percent = Health(Players In Slot(2, Opposite Team Of(Team Of(
				Event Player)))) / Max Health(Players In Slot(2, Opposite Team Of(Team Of(Event Player))));
			"grab ult charge before the swap"
			Players In Slot(2, Opposite Team Of(Team Of(Event Player))).ult_percent = Ultimate Charge Percent(Players In Slot(2,
				Opposite Team Of(Team Of(Event Player))));
			"start forcing the player on the other team's slot to the event player's new hero"
			Start Forcing Player To Be Hero(Players In Slot(2, Opposite Team Of(Team Of(Event Player))), Global.slot_2_hero);
			"pause REQUIRED. ult charge will not update properly without it"
			Wait(1, Ignore Condition);
			"multiply new hero health by the percent of the previous health, add one to prevent accidentally dying from character swap"
			Set Player Health(Players In Slot(2, Opposite Team Of(Team Of(Event Player))), Players In Slot(2, Opposite Team Of(Team Of(
				Event Player))).health_percent * Max Health(Players In Slot(2, Opposite Team Of(Team Of(Event Player)))) + 1);
			"set ultimate charge, living player retains 80% of their previous charge"
			Set Ultimate Charge(Players In Slot(2, Opposite Team Of(Team Of(Event Player))), Players In Slot(2, Opposite Team Of(Team Of(
				Event Player))).health_percent * 0.800);
			"extra wait, just in case (sometimes needed for update)"
			Wait(1, Ignore Condition);
		End;
	}
}

rule("Start Select - 3")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.slot_3_hero != Null;
	}

	actions
	{
		"must wait until the player actively spawns"
		Wait Until(Has Spawned(Players In Slot(3, Team 1)), 60);
		"sets choice for team 1"
		Global.t1_s3_choice = Hero Of(Players In Slot(3, Team 1));
		"must wait until the player actively spawns"
		Wait Until(Has Spawned(Players In Slot(3, Team 2)), 60);
		"sets choice for team 2"
		Global.t2_s3_choice = Hero Of(Players In Slot(3, Team 2));
		"randomly selects one of the two choices"
		Global.slot_3_hero = Random Value In Array(Array(Global.t1_s3_choice, Global.t2_s3_choice));
		"force both players to be the same selected hero"
		Start Forcing Player To Be Hero(Players In Slot(3, All Teams), Global.slot_3_hero);
	}
}

rule("Death Select - 3")
{
	event
	{
		Player Died;
		All;
		Slot 3;
	}

	conditions
	{
		Is Game In Progress == True;
		"no switch if you cause your own death"
		Attacker != Victim;
	}

	actions
	{
		"allow dead player to switch characters"
		Stop Forcing Player To Be Hero(Event Player);
		"must wait to allow player to spawn in as new choice"
		Wait(11, Ignore Condition);
		"set new hero value"
		Global.slot_3_hero = Hero Of(Event Player);
		"start forcing event player to their character of choice, no reswap."
		Start Forcing Player To Be Hero(Event Player, Global.slot_3_hero);
		"check if the event player is a new character, changes only happen if they are."
		If(Global.slot_3_hero != Hero Of(Players In Slot(3, Opposite Team Of(Team Of(Event Player)))));
			"grab health percent before the swap"
			Players In Slot(3, Opposite Team Of(Team Of(Event Player))).health_percent = Health(Players In Slot(3, Opposite Team Of(Team Of(
				Event Player)))) / Max Health(Players In Slot(3, Opposite Team Of(Team Of(Event Player))));
			"grab ult charge before the swap"
			Players In Slot(3, Opposite Team Of(Team Of(Event Player))).ult_percent = Ultimate Charge Percent(Players In Slot(3,
				Opposite Team Of(Team Of(Event Player))));
			"start forcing the player on the other team's slot to the event player's new hero"
			Start Forcing Player To Be Hero(Players In Slot(3, Opposite Team Of(Team Of(Event Player))), Global.slot_3_hero);
			"pause REQUIRED. ult charge will not update properly without it"
			Wait(1, Ignore Condition);
			"multiply new hero health by the percent of the previous health, add one to prevent accidentally dying from character swap"
			Set Player Health(Players In Slot(3, Opposite Team Of(Team Of(Event Player))), Players In Slot(3, Opposite Team Of(Team Of(
				Event Player))).health_percent * Max Health(Players In Slot(3, Opposite Team Of(Team Of(Event Player)))) + 1);
			"set ultimate charge, living player retains 80% of their previous charge"
			Set Ultimate Charge(Players In Slot(3, Opposite Team Of(Team Of(Event Player))), Players In Slot(3, Opposite Team Of(Team Of(
				Event Player))).health_percent * 0.800);
			"extra wait, just in case (sometimes needed for update)"
			Wait(1, Ignore Condition);
		End;
	}
}

rule("Start Select - 4")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.slot_4_hero != Null;
	}

	actions
	{
		"must wait until the player actively spawns"
		Wait Until(Has Spawned(Players In Slot(4, Team 1)), 60);
		"sets choice for team 1"
		Global.t1_s4_choice = Hero Of(Players In Slot(4, Team 1));
		"must wait until the player actively spawns"
		Wait Until(Has Spawned(Players In Slot(4, Team 2)), 60);
		"sets choice for team 2"
		Global.t2_s4_choice = Hero Of(Players In Slot(4, Team 2));
		"randomly selects one of the two choices"
		Global.slot_4_hero = Random Value In Array(Array(Global.t1_s4_choice, Global.t2_s4_choice));
		"force both players to be the same selected hero"
		Start Forcing Player To Be Hero(Players In Slot(4, All Teams), Global.slot_4_hero);
	}
}

rule("Death Select - 4")
{
	event
	{
		Player Died;
		All;
		Slot 4;
	}

	conditions
	{
		Is Game In Progress == True;
		"no switch if you cause your own death"
		Attacker != Victim;
	}

	actions
	{
		"allow dead player to switch characters"
		Stop Forcing Player To Be Hero(Event Player);
		"must wait to allow player to spawn in as new choice"
		Wait(11, Ignore Condition);
		"set new hero value"
		Global.slot_4_hero = Hero Of(Event Player);
		"start forcing event player to their character of choice, no reswap."
		Start Forcing Player To Be Hero(Event Player, Global.slot_4_hero);
		"check if the event player is a new character, changes only happen if they are."
		If(Global.slot_4_hero != Hero Of(Players In Slot(4, Opposite Team Of(Team Of(Event Player)))));
			"grab health percent before the swap"
			Players In Slot(4, Opposite Team Of(Team Of(Event Player))).health_percent = Health(Players In Slot(4, Opposite Team Of(Team Of(
				Event Player)))) / Max Health(Players In Slot(4, Opposite Team Of(Team Of(Event Player))));
			"grab ult charge before the swap"
			Players In Slot(4, Opposite Team Of(Team Of(Event Player))).ult_percent = Ultimate Charge Percent(Players In Slot(4,
				Opposite Team Of(Team Of(Event Player))));
			"start forcing the player on the other team's slot to the event player's new hero"
			Start Forcing Player To Be Hero(Players In Slot(4, Opposite Team Of(Team Of(Event Player))), Global.slot_4_hero);
			"pause REQUIRED. ult charge will not update properly without it"
			Wait(1, Ignore Condition);
			"multiply new hero health by the percent of the previous health, add one to prevent accidentally dying from character swap"
			Set Player Health(Players In Slot(4, Opposite Team Of(Team Of(Event Player))), Players In Slot(4, Opposite Team Of(Team Of(
				Event Player))).health_percent * Max Health(Players In Slot(4, Opposite Team Of(Team Of(Event Player)))) + 1);
			"set ultimate charge, living player retains 80% of their previous charge"
			Set Ultimate Charge(Players In Slot(4, Opposite Team Of(Team Of(Event Player))), Players In Slot(4, Opposite Team Of(Team Of(
				Event Player))).health_percent * 0.800);
			"extra wait, just in case (sometimes needed for update)"
			Wait(1, Ignore Condition);
		End;
	}
}
